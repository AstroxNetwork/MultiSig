type EgoBtcError = variant { UnknownError : text; AddressNotFound };
type GetAddressResponse = record { address : text };
type Network = variant { Mainnet; Regtest; Testnet };
type OutPoint = record { txid : vec nat8; vout : nat32 };
type Result = variant { Ok : GetAddressResponse; Err : EgoBtcError };
type Result_1 = variant { Ok : UserBalanceResponse; Err : EgoBtcError };
type Result_2 = variant { Ok : SendResponse; Err : EgoBtcError };
type SendRequest = record {
  request_id : nat64;
  path : text;
  to_address : text;
  amount_in_satoshi : nat64;
  extended : vec record { text; text };
};
type SendResponse = record {
  tx_id : text;
  from_address : text;
  amount_in_satoshi : nat64;
};
type UserBalanceResponse = record { balance : nat64 };
type Utxo = record { height : nat32; value : nat64; outpoint : OutPoint };
service : () -> {
  btc_address_get : (text) -> (Result) query;
  btc_address_get_all : () -> (vec text) query;
  btc_address_set : (text) -> (text);
  btc_balance_get : (text) -> (nat64);
  btc_balance_path_get : (text) -> (Result_1);
  btc_fee_get : () -> (vec nat64);
  btc_get_txid : (nat64) -> (opt text) query;
  btc_is_owner : () -> (bool) query;
  btc_is_user : () -> (bool) query;
  btc_key_get : () -> (text) query;
  btc_network_get : () -> (Network) query;
  btc_network_set : (Network) -> (Network);
  btc_tx_send : (SendRequest) -> (Result_2);
  btc_utxos_get : (text) -> (vec Utxo);
}